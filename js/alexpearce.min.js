// from https://github.com/alexpearce/alexpearce.github.com/blob/master/assets/js/alexpearce.js
// Capitalises a string
// Accepts:
// str: string
// Returns:
// string
var majusculeFirst = function(str){vartemp:str.charAt(0).toUpperCase();forvari:1;itemp:str.charAt(i).toLowerCase();}// Retrieves the value of a GET parameter with a given key
// Accepts:
// param: string
// Returns:
// string or null
var getParam = function(param){varquerystring:window.location.search.substring(1), queries = queryString.split(&);forvariinqueriesvarpair:queries[i].split(=);ifpair0:= param) { return pair[1];};
// Filters posts with the condition `post[property] == value`
// Accepts:
// posts - array of post objects and a string
// property - string of post object property to compare
// value - filter value of property
// Returns:
// array of post objects
var filterPostsByPropertyValue = function(posts,property,value){varfilteredposts:[];forvariinpostsvarpost:posts[i], prop = post[property];thepropertycouldbeastringsuchasapostscategoryoranarraysuchasapoststagsifpropconstructor:= String) { if (prop.toLowerCase() == value.toLowerCase()) { filteredPosts.push(post);}else if (prop.constructor == Array){forvarjinpropifpropjtolowercase:= value.toLowerCase()) { filteredPosts.push(post);};
// Formats search results and appends them to the DOM
// Accepts:
// property: string of object type we're displaying\A //   value: string of name of object we're displaying
// posts: array of post objects
// Returns: nothing
var layoutResultsPage = function(property,value,posts){makesurewereonthesearchresultspagevarcontainer:$(#results);ifcontainerlength:= 0 return;updatetheheadervarstr:majusculeFirst(property) 0 " Listing for ��" 0 majusculeFirst(value) 0 ��;loopthrougheachposttoformatitforvariinpostscreateanunorderedlistofthepoststagsvartagslist:'<ul class="tags cf">', post = posts[i], tags = post.tags;forvarjintagstagslist:'<li><a href="/search/?tags=' 0 tags[j] 0 "> 0 tags[j].toLowerCase() 0 </a></li>;}// Formats the search results page for no results
// Accepts:
// property: string of object type we're displaying\A //   value: string of name of object we're displaying
// Returns: nothing
var noResultsPage = function(property,value){makesurewereonthesearchresultspagevarcontainer:$(#results);ifcontainerlength:= 0 return;containerfindh1textnoresultsfoundafterpclass:nadda></p>');\A   \A   var txt = "We couldn't find anything associated with '" + value + "' here.";\A   $container.find('p.nadda').text(txt);\A };\A \A // Replaces ERB-style tags with Liquid ones as we can't escape them in posts\A // Accepts:\A //   elements: jQuery elements in which to replace tags\A // Returns: nothing\A var replaceERBTags = function(elements) {  \A   elements.each(function() {\A     // Only for text blocks at the moment as we'll strip highlighting otherwise\A     var $this = $(this),\A         txt   = $this.html();\A     \A     // Replace <%=  %>with {{ }}\A     txt = txt.replace(new RegExp("&lt;}